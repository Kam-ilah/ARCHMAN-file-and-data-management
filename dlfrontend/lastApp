import React, { Component, useEffect, useState } from "react";
import "./App.css";
import Header from "./Header";
import Button from "./Button";
import ManagerOptions from "./ManagerOptions";
import Checkbox from "./Checkbox";
import FileUploader from "./FileUploader";
import axios from "axios";

// creating a folder

// const handleCreateFolder = () => {
//   const folderName = prompt("Please enter a folder name: "); // Use the user-inputted folderName in the data object
//   if (folderName) {
//     const data = { folderName };

//     // fetch('api/createfolder', {
//     //   method: 'POST',
//     //   headers: {
//     //     'Content-Type': 'application/json',
//     //   },
//     //   body: JSON.stringify(data),
//     // })
//     //   .then(response => response.json())
//     //   .then(data => {
//     //     setResponseMessage(data); // Update the state with the response message
//     //   })
//     //   .catch(error => {
//     //     console.error('Error:', error);
//     //     // Handle any errors that occurred during the POST request
//     //   });

//     axios
//       .post("/api/createfolder", data)
//       .then((response) => {
//         setResponseMessage(response.data); // Update the state with the response message
//       })
//       .catch((error) => {
//         console.error("Error:", error);
//         // Handle any errors that occurred during the POST request
//       });
//   }
// };

function Folder({ folder, onAddFolder }) {
  const [expanded, setExpanded] = useState(false);
  const [newFolderName, setNewFolderName] = useState("");
  const [showInput, setShowInput] = useState(false);

  const handleToggleFolder = () => {
    setExpanded((prevExpanded) => !prevExpanded);
  };

  const handleAddFolderClick = () => {
    setShowInput(true);
  };

  const handleConfirmAddFolder = () => {
    if (newFolderName.trim() !== "") {
      const newFolder = {
        name: newFolderName,
        files: [],
        children: [],
      };
      onAddFolder(newFolder, folder.name);
      setNewFolderName("");
      setShowInput(false);
    }
  };

  return (
    <div key={folder.name}>
      <h3>
        {folder.name}
        <button onClick={handleToggleFolder}>{expanded ? "-" : "+"}</button>
      </h3>
      {showInput ? (
        <div>
          <input
            type="text"
            value={newFolderName}
            onChange={(e) => setNewFolderName(e.target.value)}
            placeholder="Enter folder name"
          />
          <button onClick={handleConfirmAddFolder}>Confirm</button>
        </div>
      ) : (
        <button onClick={handleAddFolderClick}>Create Folder</button>
      )}
      {expanded && folder.files && folder.files.length > 0 && (
        <ul>
          {folder.files.map((file, index) => (
            <li key={index}>
              {file.name} ({file.size})
            </li>
          ))}
        </ul>
      )}
      {expanded &&
        folder.children &&
        folder.children.length > 0 &&
        folder.children.map((childFolder) => (
          <Folder
            key={childFolder.name}
            folder={childFolder}
            onAddFolder={onAddFolder}
          />
        ))}
    </div>
  );
}

function App() {
  const [folders, setFolders] = useState([]);
  // const [responseMessage, setResponseMessage] = useState("");

  useEffect(() => {
    fetchFolders();
  }, []);

  const fetchFolders = async () => {
    try {
      const response = await axios.get("/api/folders");
      setFolders([response.data]);
    } catch (error) {
      console.error("Error fetching folders:", error);
      console.log(error.response); // This will show the response data sent by the server
      console.log(error.message); // This will show the error message
    }
  };

  const handleAddFolder = (newFolder, parentFolderName) => {
    const updatedFolders = addFolderToParent(
      folders,
      newFolder,
      parentFolderName
    );
    setFolders(updatedFolders);
  };

  return (
    <div className="App">
      <Header />
      <ManagerOptions />
      {/* <Button name="Upload" />
      <Button name="Create Folder" /> */}
      {/* <Checkbox /> */}
      {/* <h1>createfolder</h1> */}
      {/* <FileUploader /> */}

      {/* <button onClick={handleCreateFolder}>Create Folder</button> */}
      {/* {responseMessage && <p>{responseMessage}</p>} */}

      {/* {folders.map((folder) => (
        <Folder key={folder.name} folder={folder} />
      ))} */}

      {folders.map((folder) => (
        <Folder
          key={folder.name}
          folder={folder}
          onAddFolder={handleAddFolder}
        />
      ))}
    </div>
  );
}

function addFolderToParent(folders, newFolder, parentFolderName) {
  return folders.map((folder) => {
    if (folder.name === parentFolderName) {
      return {
        ...folder,
        children: [...folder.children, newFolder],
      };
    }
    if (folder.children && folder.children.length > 0) {
      return {
        ...folder,
        children: addFolderToParent(
          folder.children,
          newFolder,
          parentFolderName
        ),
      };
    }
    return folder;
  });
}
export default App;
